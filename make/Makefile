# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../third_party/gtest-1.7.0

# Where to find user code.
USER_DIR = ../test

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
EIGEN_LIB = eigen-eigen-1306d75b4a21
PNG_LIB = png++-0.2.5

# Halide generated files are here
HALIDE_OBJ_PATH=../xform_halide/

CPPFLAGS += -isystem $(GTEST_DIR)/include\
	    -I./../src \
	    -I $(HALIDE_OBJ_PATH)\
	    -I./../third_party/$(EIGEN_LIB)/\
	    -I./../third_party/$(PNG_LIB)/\
	    -I./../third_party/halide/apps/support/\
	    -lpng15\
	    -ljpeg

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 -Ofast -msse2


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS =  util_unittest XImage_unittest ColorSpace_unittest\
	 Filter_unittest Warp_unittest Pyramid_unittest SparseGrid_unittest\
	 Curve_unittest LocalLaplacian_unittest TransformModel_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.png *.meta

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# Libraries
sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

util.o : ../src/util.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/util.cpp

XImage.o : ../src/XImage.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/XImage.cpp

ColorSpace.o : ../src/ColorSpace.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/ColorSpace.cpp

Filter.o : ../src/Filter.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/Filter.cpp

Warp.o : ../src/Warp.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/Warp.cpp

Pyramid.o : ../src/Pyramid.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/Pyramid.cpp

SparseGrid.o : ../src/SparseGrid.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/SparseGrid.cpp

Curve.o : ../src/Curve.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/Curve.cpp

LocalLaplacian.o : ../src/LocalLaplacian.cpp \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/LocalLaplacian.cpp

Recipe.o :  ../src/Recipe.cpp\
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/Recipe.cpp

TransformModel.o : ../src/TransformModel.cpp\
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ../src/TransformModel.cpp ../

# Unit tests
util_unittest.o : $(USER_DIR)/util_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/util_unittest.cc

util_unittest : util_unittest.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

XImage_unittest.o : $(USER_DIR)/XImage_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/XImage_unittest.cc

# halide_resize.o shouldn't be here! 
# I do this because for now I'm testing Image<float>, which is compiled along with halide object
# In the future I should either disable Image<float> or compile it into something like halide_image.o
XImage_unittest : XImage_unittest.o XImage.o util.o $(HALIDE_OBJ_PATH)halide_resize.o  gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

ColorSpace_unittest.o : $(USER_DIR)/ColorSpace_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ColorSpace_unittest.cc

ColorSpace_unittest : ColorSpace_unittest.o ColorSpace.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Filter_unittest.o : $(USER_DIR)/Filter_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/Filter_unittest.cc

Filter_unittest : Filter_unittest.o Filter.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Warp_unittest.o : $(USER_DIR)/Warp_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/Warp_unittest.cc

Warp_unittest : Warp_unittest.o Warp.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Pyramid_unittest.o : $(USER_DIR)/Pyramid_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/Pyramid_unittest.cc

Pyramid_unittest : Pyramid_unittest.o Pyramid.o Warp.o XImage.o Filter.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

SparseGrid_unittest.o : $(USER_DIR)/SparseGrid_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/SparseGrid_unittest.cc

SparseGrid_unittest : SparseGrid_unittest.o SparseGrid.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Curve_unittest.o : $(USER_DIR)/Curve_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/Curve_unittest.cc

Curve_unittest : Curve_unittest.o Curve.o ColorSpace.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

LocalLaplacian_unittest.o : $(USER_DIR)/LocalLaplacian_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/LocalLaplacian_unittest.cc

LocalLaplacian_unittest : LocalLaplacian_unittest.o LocalLaplacian.o Warp.o Pyramid.o Filter.o Curve.o ColorSpace.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

TransformModel_unittest.o : $(USER_DIR)/TransformModel_unittest.cc \
                $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/TransformModel_unittest.cc

TransformModel_unittest : TransformModel_unittest.o Recipe.o TransformModel.o $(HALIDE_OBJ_PATH)halide_resize.o LocalLaplacian.o Warp.o Pyramid.o Filter.o Curve.o ColorSpace.o XImage.o util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@









